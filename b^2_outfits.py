# -*- coding: utf-8 -*-
"""B^2 outfits

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1o1My9U_ulvCFCuXVi9pSTmGSUn7B1a26
"""

# B² Outfits - Streamlit Fashion Store App
# Requirements: streamlit, pandas, PIL, base64

import streamlit as st
import pandas as pd
import os
from PIL import Image
from io import BytesIO
import base64

# Set page config
st.set_page_config(page_title="B² Outfits", layout="wide")

st.title("𝔯² Outfits - Your Personalized Fashion Boutique")

# Load data
def load_data():
    if os.path.exists("clothing_data.csv"):
        return pd.read_csv("clothing_data.csv")
    else:
        st.warning("No dataset found. Upload or add clothing items manually.")
        return pd.DataFrame(columns=["ID", "Name", "Category", "Size", "Price", "Quantity", "Image"])

# Save data
def save_data(df):
    df.to_csv("clothing_data.csv", index=False)

# Reduce stock after purchase
def reduce_stock(df, selected_items):
    for item_id in selected_items:
        idx = df[df['ID'] == item_id].index[0]
        if df.at[idx, 'Quantity'] > 0:
            df.at[idx, 'Quantity'] -= 1
    save_data(df)

# Generate downloadable payment receipt
def generate_receipt(selected_items, df):
    receipt_df = df[df['ID'].isin(selected_items)].copy()
    total = receipt_df['Price'].sum()
    receipt_df = receipt_df[['ID', 'Name', 'Price']]
    receipt_df.loc['Total'] = ['', 'TOTAL', total]
    output = BytesIO()
    receipt_df.to_csv(output, index=False)
    b64 = base64.b64encode(output.getvalue()).decode()
    return f'<a href="data:file/csv;base64,{b64}" download="payment_receipt.csv">Download Payment Receipt</a>'

# Display outfit items
def display_outfits(df):
    st.subheader("🌂 Available Outfits")
    selected_ids = []
    cols = st.columns(3)
    for i, row in df.iterrows():
        with cols[i % 3]:
            st.markdown(f"**{row['Name']}**")
            if os.path.exists(row['Image']):
                st.image(Image.open(row['Image']), width=150)
            st.write(f"Category: {row['Category']}, Size: {row['Size']}")
            st.write(f"Price: ₹{row['Price']} | In Stock: {row['Quantity']}")
            if row['Quantity'] > 0:
                if st.checkbox(f"Select {row['Name']}", key=row['ID']):
                    selected_ids.append(row['ID'])
    return selected_ids

# Upload product image
def upload_image():
    uploaded_file = st.file_uploader("Upload Product Image", type=["jpg", "jpeg", "png"])
    if uploaded_file:
        img_path = os.path.join("images", uploaded_file.name)
        with open(img_path, "wb") as f:
            f.write(uploaded_file.read())
        return img_path
    return ""

# Add new outfit item
def add_item_form(df):
    st.sidebar.subheader("Add New Outfit")
    with st.sidebar.form("add_form"):
        name = st.text_input("Name")
        category = st.selectbox("Category", ["Top", "Bottom", "Dress", "Ethnic", "Sportswear", "Winterwear"])
        size = st.selectbox("Size", ["XS", "S", "M", "L", "XL"])
        price = st.number_input("Price (₹)", min_value=100)
        quantity = st.number_input("Quantity", min_value=1, value=1)
        img_path = upload_image()
        submitted = st.form_submit_button("Add Item")
        if submitted and name and img_path:
            new_id = df["ID"].max() + 1 if not df.empty else 1
            new_row = pd.DataFrame([[new_id, name, category, size, price, quantity, img_path]],
                                   columns=["ID", "Name", "Category", "Size", "Price", "Quantity", "Image"])
            df = pd.concat([df, new_row], ignore_index=True)
            save_data(df)
            st.success("Item added successfully!")
    return df

# Main App
if __name__ == "__main__":
    os.makedirs("images", exist_ok=True)
    df = load_data()
    df = add_item_form(df)
    selected = display_outfits(df)

    if selected:
        st.markdown("---")
        st.success(f"You selected {len(selected)} items.")
        st.markdown(generate_receipt(selected, df), unsafe_allow_html=True)
        if st.button("Confirm Payment and Update Stock"):
            reduce_stock(df, selected)
            st.success("🚀 Payment successful and stock updated!")