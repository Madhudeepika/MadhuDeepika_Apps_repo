# -*- coding: utf-8 -*-
"""my_week_appv3

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1W5HukFqlGyppavCD-hl7LgEu3takN1eU
"""

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
from datetime import datetime
from io import BytesIO
from PIL import Image
import base64
import os

# Set background image using custom CSS
page_bg_img = f"""
<style>
body {{
background-image: url("https://i.pinimg.com/1200x/19/a2/9d/19a29d5e12dc17c95e278f6f3700bfce.jpg");
background-size: cover;
}}
</style>
"""
st.markdown(page_bg_img, unsafe_allow_html=True)

# Apply cute Google Font
st.markdown("""
<style>
@import url('https://fonts.googleapis.com/css2?family=Patrick+Hand&display=swap');
html, body, [class*="css"]  {
    font-family: 'Patrick Hand', cursive;
    font-size: 18px;
}
</style>
""", unsafe_allow_html=True)

st.title("üìä Self Analyzer")

# User inputs
name = st.text_input("Enter your name")
date_from = st.date_input("From Date")
date_to = st.date_input("To Date")

st.subheader("Spending Details")
categories = ['Food', 'Transport', 'Bills', 'Shopping', 'Other']
inputs = {}
for cat in categories:
    inputs[cat] = st.text_input(f"{cat} (‚Çπ)", key=cat)

# Buttons
col1, col2, col3 = st.columns(3)
save_clicked = col1.button("üíæ Save")
download_clicked = col2.button("‚¨áÔ∏è Download as Excel")
clear_clicked = col3.button("üßπ Clear")

# Process save
if save_clicked:
    # Ensure valid input
    if name and all(inputs.values()):
        data = {
            'Name': name,
            'From': date_from,
            'To': date_to,
        }
        data.update(inputs)

        df = pd.DataFrame([data])
        filename = f"{name.replace(' ', '_').lower()}_history.csv"

        if os.path.exists(filename):
            df_existing = pd.read_csv(filename)
            df_combined = pd.concat([df_existing, df], ignore_index=True)
        else:
            df_combined = df

        df_combined.to_csv(filename, index=False)
        st.success("‚úÖ Data saved!")
    else:
        st.error("‚ùó Please fill in all fields.")

# Process clear
if clear_clicked:
    st.experimental_rerun()

# Download Excel
if download_clicked and name:
    filename = f"{name.replace(' ', '_').lower()}_history.csv"
    if os.path.exists(filename):
        with open(filename, 'rb') as f:
            b64 = base64.b64encode(f.read()).decode()
            href = f'<a href="data:application/octet-stream;base64,{b64}" download="{filename}">üì• Click here to download your spending history (CSV)</a>'
            st.markdown(href, unsafe_allow_html=True)
    else:
        st.info("‚ÑπÔ∏è No history available.")

# Show pie chart of current input
if name and all(inputs.values()):
    labels = list(inputs.keys())
    values = [float(v) for v in inputs.values()]

    fig, ax = plt.subplots()
    ax.pie(values, labels=labels, autopct='%1.1f%%', startangle=90)
    ax.axis('equal')
    st.pyplot(fig)

    # Save snapshot as JPG
    buf = BytesIO()
    fig.savefig(buf, format="jpeg")
    buf.seek(0)
    st.download_button("üñºÔ∏è Save This Snapshot (JPG)", buf, file_name="weekly_spending.jpg", mime="image/jpeg")

# Sidebar: This Month Summary
st.sidebar.header("üìÖ This Month's Summary")
if name:
    filename = f"{name.replace(' ', '_').lower()}_history.csv"
    if os.path.exists(filename):
        df = pd.read_csv(filename)
        df['From'] = pd.to_datetime(df['From'])
        this_month = df[df['From'].dt.month == datetime.now().month]
        if not this_month.empty:
            sums = this_month[categories].astype(float).sum()
            fig2, ax2 = plt.subplots()
            ax2.pie(sums, labels=sums.index, autopct='%1.1f%%', startangle=90)
            ax2.axis('equal')
            st.sidebar.pyplot(fig2)
        else:
            st.sidebar.write("No data for this month.")
    else:
        st.sidebar.write("No history available.")